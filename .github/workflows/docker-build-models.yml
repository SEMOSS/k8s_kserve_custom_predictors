name: Docker Build Models

on:
  push:
    branches:
      - main
    paths:
      - '*/Dockerfile'
      - '*/model.py'
      - '*/pyproject.toml'
      - '*/guide.md'
  pull_request:
    branches:
      - main
    paths:
      - '*/Dockerfile'
      - '*/model.py'
      - '*/pyproject.toml'
      - '*/guide.md'
  workflow_dispatch:
    inputs:
      models:
        description: 'Comma-separated list of models to build (leave empty for automatic detection)'
        required: false
        default: ''

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for detecting changes
      
      - name: Detect changed model directories
        id: set-matrix
        run: |
          # Initialize models array
          MODELS=()
          
          # If workflow was manually triggered with specific models
          if [ ! -z "${{ github.event.inputs.models }}" ]; then
            # Split comma-separated input into array
            IFS=',' read -ra MODELS_INPUT <<< "${{ github.event.inputs.models }}"
            for model in "${MODELS_INPUT[@]}"; do
              # Trim whitespace
              model=$(echo "$model" | xargs)
              # Check if directory exists
              if [ -d "$model" ]; then
                MODELS+=("$model")
              fi
            done
          else
            # Get all directories with Dockerfiles
            for dir in */; do
              dir=${dir%/}  # Remove trailing slash
              if [ -f "$dir/Dockerfile" ]; then
                # For non-manual runs, check if files in this directory changed
                if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
                  # If this is a PR, compare with the base branch
                  if [ "${{ github.event_name }}" == "pull_request" ]; then
                    git diff --name-only origin/${{ github.base_ref }} HEAD | grep -q "^$dir/" && MODELS+=("$dir")
                  else
                    # For push events, compare with the previous commit
                    git diff --name-only HEAD^ HEAD | grep -q "^$dir/" && MODELS+=("$dir")
                  fi
                else
                  # For manual runs without specific models, include all models
                  MODELS+=("$dir")
                fi
              fi
            done
          fi
          
          # Create JSON matrix
          if [ ${#MODELS[@]} -eq 0 ]; then
            # If no changes detected, create a dummy value to avoid workflow failure
            echo "matrix={\"model\":[]}" >> $GITHUB_OUTPUT
            echo "No model directories with changes detected."
          else
            echo "matrix={\"model\":[\"$(IFS="\",\""; echo "${MODELS[*]}")\"]}" >> $GITHUB_OUTPUT
            echo "Detected changes in model directories: ${MODELS[@]}"
          fi

  build_and_push:
    needs: detect_changes
    if: ${{ fromJSON(needs.detect_changes.outputs.matrix).model[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.detect_changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set date environment variable
        run: echo "date=$(date '+%Y-%m-%d-%H%M')" >> $GITHUB_ENV
      
      # - name: Docker login (Private Registry)
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ vars.DOCKER_PRIVATE }}
      #     username: ${{ secrets.DOCKER_USER }}
      #     password: ${{ secrets.DOCKER_PASS }}
      
      - name: Docker login (SEMOSS Registry)
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_SEMOSS }}
          username: ${{ secrets.SEMOSS_DOCKER_USER }}
          password: ${{ secrets.SEMOSS_DOCKER_PASS }}
      
      - name: Build and push Docker image for ${{ matrix.model }}
        run: |
          # Navigate to model directory
          cd ${{ matrix.model }}
          
          # Get model name from directory name
          MODEL_NAME="${{ matrix.model }}"
          
          echo "Building Docker image for $MODEL_NAME"
          
          # Define image names with timestamps
          # PRIVATE_IMAGE="${{ vars.DOCKER_PRIVATE }}/genai/predictors/$MODEL_NAME:${{ env.date }}"
          SEMOSS_IMAGE="${{ vars.DOCKER_SEMOSS }}/genai/predictors/$MODEL_NAME:${{ env.date }}"
          
          # Also create latest tags
          # PRIVATE_LATEST="${{ vars.DOCKER_PRIVATE }}/genai/predictors/$MODEL_NAME:latest"
          SEMOSS_LATEST="${{ vars.DOCKER_SEMOSS }}/genai/predictors/$MODEL_NAME:latest"
          
          # Build the Docker image
          # docker build -t $PRIVATE_IMAGE .
          docker build -t $SEMOSS_IMAGE .
          
          # Tag the images
          # docker tag $PRIVATE_IMAGE $PRIVATE_LATEST
          # docker tag $PRIVATE_IMAGE $SEMOSS_IMAGE
          docker tag $SEMOSS_IMAGE $SEMOSS_LATEST
          
          # Push all the images
          # docker push $PRIVATE_IMAGE
          # docker push $PRIVATE_LATEST
          docker push $SEMOSS_IMAGE
          docker push $SEMOSS_LATEST
          
          echo "Successfully built and pushed images for $MODEL_NAME"