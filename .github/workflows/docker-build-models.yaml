name: Docker Build Model Images

on:
  push:
    branches:
      - main
    paths:
      - 'models/**'
  pull_request:
    branches:
      - main
    paths:
      - 'models/**'
  workflow_dispatch:
    inputs:
      model_names:
        description: 'Comma-separated list of model names to build (e.g., gliner,other_model)'
        required: false
        default: ''
      modes:
        description: 'Comma-separated list of modes to build (cpu,gpu or leave empty for both)'
        required: false
        default: 'cpu'

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for detecting changes
      
      - name: Detect changed model directories
        id: set-matrix
        run: |
          # Initialize arrays for models and modes
          MODELS=()
          MODES=()
          
          # Process modes input
          if [ ! -z "${{ github.event.inputs.modes }}" ]; then
            IFS=',' read -ra MODES_INPUT <<< "${{ github.event.inputs.modes }}"
            for mode in "${MODES_INPUT[@]}"; do
              # Trim whitespace
              mode=$(echo "$mode" | xargs)
              if [[ "$mode" == "cpu" || "$mode" == "gpu" ]]; then
                MODES+=("$mode")
              fi
            done
          else
            # Default to both modes if not specified
            MODES+=("cpu" "gpu")
          fi
          
          # If workflow was manually triggered with specific model names
          if [ ! -z "${{ github.event.inputs.model_names }}" ]; then
            # Split comma-separated input into array
            IFS=',' read -ra MODELS_INPUT <<< "${{ github.event.inputs.model_names }}"
            for model in "${MODELS_INPUT[@]}"; do
              # Trim whitespace
              model=$(echo "$model" | xargs)
              # Check if directory exists
              if [ -d "models/$model" ]; then
                MODELS+=("$model")
              fi
            done
          else
            # Check for changes in the models directories
            if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
              # Get all model directories
              for dir in models/*/; do
                # Extract just the model name from the path
                model_name=$(basename "$dir")
                
                # If this is a PR, compare with the base branch
                if [ "${{ github.event_name }}" == "pull_request" ]; then
                  # Get all changed files for this model
                  CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep "^models/$model_name/" || echo "")
                  # If there are changed files and they're not just README.md
                  if [ ! -z "$CHANGED_FILES" ] && \
                      (echo "$CHANGED_FILES" | grep -v "README.md" | grep -q "."); then
                    MODELS+=("$model_name")
                  fi
                else
                  # For push events, compare with the previous commit
                  CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep "^models/$model_name/" || echo "")
                  # If there are changed files and they're not just README.md
                  if [ ! -z "$CHANGED_FILES" ] && \
                      (echo "$CHANGED_FILES" | grep -v "README.md" | grep -q "."); then
                    MODELS+=("$model_name")
                  fi
                fi
              done
            else
              # For manual runs without specific model names, include all models
              for dir in models/*/; do
                model_name=$(basename "$dir")
                MODELS+=("$model_name")
              done
            fi
          fi
          
          # Create the matrix JSON
          # Ensure we have a valid matrix even if no models were found
          if [ ${#MODELS[@]} -eq 0 ]; then
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            # Build matrix with combinations of models and modes
            MATRIX_JSON="{"
            MATRIX_JSON+="\"include\":["
            
            FIRST=true
            for model in "${MODELS[@]}"; do
              for mode in "${MODES[@]}"; do
                if [ "$FIRST" = true ]; then
                  FIRST=false
                else
                  MATRIX_JSON+=","
                fi
                MATRIX_JSON+="{\"model\":\"$model\",\"mode\":\"$mode\"}"
              done
            done
            
            MATRIX_JSON+="]}"
            echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
            echo "Created matrix: $MATRIX_JSON"
          fi

  build_and_push:
    needs: detect_changes
    if: ${{ fromJson(needs.detect_changes.outputs.matrix).include[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect_changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set date environment variable
        run: echo "date=$(date '+%Y-%m-%d-%H%M')" >> $GITHUB_ENV

      # Free up disk space for large Docker builds
      - name: Free disk space
        run: |
          echo "Disk space before cleanup"
          df -h
          
          # Remove unnecessary large packages
          sudo apt-get remove -y '^ghc-.*'
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Remove swap file to free up space
          sudo swapoff -a
          sudo rm -f /swapfile
          
          # Remove large directories
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          
          # Docker cleanup
          docker system prune -af
          
          echo "Disk space after cleanup"
          df -h
      
      - name: Docker login (Private Registry)
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_CONTAINER_SEMOSS }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      
      # ADD THIS STEP: Pull the base image explicitly
      - name: Pull base image
        run: |
          BASE_IMAGE="${{ vars.DOCKER_CONTAINER_SEMOSS }}/genai/cfg-ms-torch/${{ matrix.mode }}:latest"
          echo "Pulling base image: $BASE_IMAGE"
          docker pull $BASE_IMAGE
      
      - name: Build and push Docker image for ${{ matrix.model }}-${{ matrix.mode }}
        run: |
          # Define image details
          MODEL="${{ matrix.model }}"
          MODE="${{ matrix.mode }}"
          
          echo "Building model Docker image for $MODEL ($MODE)"
          
          # Define image names with timestamps
          PRIVATE_IMAGE="${{ vars.DOCKER_CONTAINER_SEMOSS }}/genai/cfg-ms-models/$MODEL-$MODE:${{ env.date }}"
          
          # Also create latest tags
          PRIVATE_LATEST="${{ vars.DOCKER_CONTAINER_SEMOSS }}/genai/cfg-ms-models/$MODEL-$MODE:latest"
          
          # Define complete base image path
          BASE_IMAGE="${{ vars.DOCKER_CONTAINER_SEMOSS }}/genai/cfg-ms-torch/$MODE:latest"
          
          # Build the Docker image
          docker build \
            --build-arg MODE=$MODE \
            --build-arg BASE_IMAGE=$BASE_IMAGE \
            --build-arg MODEL_NAME=$MODEL \
            -t $PRIVATE_IMAGE \
            -f models/$MODEL/Dockerfile .
          
          # Tag the images
          docker tag $PRIVATE_IMAGE $PRIVATE_LATEST
          
          # Push all the images
          docker push $PRIVATE_IMAGE
          docker push $PRIVATE_LATEST
          
          echo "Successfully built and pushed model image for $MODEL ($MODE)"